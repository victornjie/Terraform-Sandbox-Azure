# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

stages:
  - stage: TerraformValidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: install
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure-avd'
              backendServiceArm: 'spn-terraform'
              backendAzureRmResourceGroupName: 'Terraform'
              backendAzureRmStorageAccountName: 'victormbockterraform'
              backendAzureRmContainerName: 'tf-sandbox'
              backendAzureRmKey: 'sandbox-avd.tfstate'
          - task: TerraformTaskV4@4
            displayName: validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure-avd'
              
  - stage: TerraformApply
    condition: succeeded('TerraformValidate')
    dependsOn: TerraformValidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: install
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure-avd'
              backendServiceArm: 'spn-terraform'
              backendAzureRmResourceGroupName: 'Terraform'
              backendAzureRmStorageAccountName: 'victormbockterraform'
              backendAzureRmContainerName: 'tf-sandbox'
              backendAzureRmKey: 'sandbox-avd.tfstate'
          - task: TerraformTaskV4@4
            displayName: plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure-avd'
              environmentServiceNameAzureRM: 'spn-terraform'
          - task: TerraformTaskV4@4
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure-avd'
              environmentServiceNameAzureRM: 'spn-terraform'
